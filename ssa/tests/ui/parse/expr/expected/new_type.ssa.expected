[
  Item {
    id: ItemId(1)
    kind: ItemKind::Let(Let {
        binding: Ident {
          id: IdentId(1)
          name: "Option"
        }
        ty: 
        value: Option::Some(Expr {
            id: ExprId(1)
            kind: ExprKind::Union(ExprUnion {
                params: [
                  TypeParam {
                    name: Ident {
                      id: IdentId(2)
                      name: "T"
                    }
                    bounds: (
                    )
                  }
                ]
                variants: [
                  Field {
                    name: Ident {
                      id: IdentId(3)
                      name: "Some"
                    }
                    ty: Type {
                      id: TypeId(1)
                      kind: TypeKind::Concrete(TypeConcrete {
                          name: Path {
                            segments: [
                              Ident {
                                id: IdentId(4)
                                name: "T"
                              }
                            ]
                          }
                          generics: [
                          ]
                        }
                      )
                    }
                  }
                  Field {
                    name: Ident {
                      id: IdentId(5)
                      name: "None"
                    }
                    ty: Type {
                      id: TypeId(2)
                      kind: TypeKind::Primitive(TypePrimitive::Unit)
                    }
                  }
                ]
              }
            )
          }
        )
      }
    )
  }
  Item {
    id: ItemId(2)
    kind: ItemKind::Let(Let {
        binding: Ident {
          id: IdentId(6)
          name: "Pair"
        }
        ty: 
        value: Option::Some(Expr {
            id: ExprId(2)
            kind: ExprKind::Struct(ExprStruct {
                params: [
                  TypeParam {
                    name: Ident {
                      id: IdentId(7)
                      name: "T"
                    }
                    bounds: (
                    )
                  }
                  TypeParam {
                    name: Ident {
                      id: IdentId(8)
                      name: "U"
                    }
                    bounds: (
                    )
                  }
                ]
                fields: [
                  Field {
                    name: Ident {
                      id: IdentId(9)
                      name: "first"
                    }
                    ty: Type {
                      id: TypeId(3)
                      kind: TypeKind::Concrete(TypeConcrete {
                          name: Path {
                            segments: [
                              Ident {
                                id: IdentId(10)
                                name: "T"
                              }
                            ]
                          }
                          generics: [
                          ]
                        }
                      )
                    }
                  }
                  Field {
                    name: Ident {
                      id: IdentId(11)
                      name: "second"
                    }
                    ty: Type {
                      id: TypeId(4)
                      kind: TypeKind::Concrete(TypeConcrete {
                          name: Path {
                            segments: [
                              Ident {
                                id: IdentId(12)
                                name: "U"
                              }
                            ]
                          }
                          generics: [
                          ]
                        }
                      )
                    }
                  }
                ]
              }
            )
          }
        )
      }
    )
  }
  Item {
    id: ItemId(3)
    kind: ItemKind::Let(Let {
        binding: Ident {
          id: IdentId(13)
          name: "Tag"
        }
        ty: 
        value: Option::Some(Expr {
            id: ExprId(3)
            kind: ExprKind::Enum(ExprEnum {
                variants: [
                  Ident {
                    id: IdentId(14)
                    name: "Some"
                  }
                  Ident {
                    id: IdentId(15)
                    name: "None"
                  }
                ]
              }
            )
          }
        )
      }
    )
  }
]
