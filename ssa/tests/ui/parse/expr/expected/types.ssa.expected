[
  Item {
    id: ItemId(1)
    kind: ItemKind::Let(Let {
        binding: Ident {
          id: IdentId(1)
          name: "x"
        }
        ty: Option::Some(Type {
            id: TypeId(10)
            kind: TypeKind::Tuple([
                Type {
                  id: TypeId(1)
                  kind: TypeKind::Primitive(TypePrimitive::Addr)
                }
                Type {
                  id: TypeId(2)
                  kind: TypeKind::Primitive(TypePrimitive::UInt {
                      bits: 32
                    }
                  )
                }
                Type {
                  id: TypeId(3)
                  kind: TypeKind::Primitive(TypePrimitive::SInt {
                      bits: 32
                    }
                  )
                }
                Type {
                  id: TypeId(4)
                  kind: TypeKind::Primitive(TypePrimitive::Float32)
                }
                Type {
                  id: TypeId(5)
                  kind: TypeKind::Primitive(TypePrimitive::Float64)
                }
                Type {
                  id: TypeId(6)
                  kind: TypeKind::Primitive(TypePrimitive::SInt {
                      bits: 43
                    }
                  )
                }
                Type {
                  id: TypeId(7)
                  kind: TypeKind::Primitive(TypePrimitive::UInt {
                      bits: 52
                    }
                  )
                }
                Type {
                  id: TypeId(9)
                  kind: TypeKind::Concrete(TypeConcrete {
                      name: Path {
                        segments: [
                          Ident {
                            id: IdentId(2)
                            name: "std"
                          }
                          Ident {
                            id: IdentId(3)
                            name: "option"
                          }
                          Ident {
                            id: IdentId(4)
                            name: "Option"
                          }
                        ]
                      }
                      generics: [
                        Type {
                          id: TypeId(8)
                          kind: TypeKind::Concrete(TypeConcrete {
                              name: Path {
                                segments: [
                                  Ident {
                                    id: IdentId(5)
                                    name: "T"
                                  }
                                ]
                              }
                              generics: [
                              ]
                            }
                          )
                        }
                      ]
                    }
                  )
                }
              ]
            )
          }
        )
        value: Option::Some(Expr {
            id: ExprId(1)
            kind: ExprKind::Ident(Ident {
                id: IdentId(6)
                name: "x"
              }
            )
          }
        )
      }
    )
  }
]
